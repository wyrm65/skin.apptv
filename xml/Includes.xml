<?xml version="1.0" encoding="UTF-8"?>
<includes>
	<!-- CUSTOM WINDOWS LIST
		_Overlay 1150
		_3DDialogSelect 1151
		_HomeCustomise 1152
		_HomeMenuItems 1153
		_DialogSelect 1154
		_FakeNode 1155
		_Search 1156
		_DummyDialog 1157
		_DialogToggleSelect 1161 -->
		
	<!-- Expressions section -->
	<expression name="isFullscreenVideo">Window.IsActive(fullscreenvideo)</expression>
	<expression name="isnotFullscreenVideo">![Window.IsActive(fullscreenvideo)]</expression>
	<expression name="isVerticalHome">Skin.HasSetting(HomeMenuVertical)</expression>
	<expression name="isHorizontalHome">Skin.HasSetting(HomeMenuHorizontal)</expression>
	<expression name="isIconHome">Skin.HasSetting(HomeMenuIcon) | [!Skin.HasSetting(HomeMenuHorizontal) + !Skin.HasSetting(HomeMenuVertical)]</expression>
	<expression name="isVideoAddon">String.Contains(Container.FolderPath,plugin://plugin.video)</expression>
	<expression name="isMovie">String.IsEqual(ListItem.DBTYPE,movie)</expression>
	<expression name="isContentMovies">Container.Content(movies)</expression>
	<expression name="isSet">String.IsEqual(ListItem.DBTYPE,set)</expression>
	<expression name="isContentSets">Container.Content(sets)</expression>
	<expression name="isVideo">String.IsEqual(ListItem.DBTYPE,video)</expression>
	<expression name="isContentVideos">Container.Content(videos)</expression>
	<expression name="isTvshow">String.IsEqual(ListItem.DBTYPE,tvshow)</expression>
	<expression name="isContentTvshows">Container.Content(tvshows)</expression>
	<expression name="isSeason">String.IsEqual(ListItem.DBTYPE,season)</expression>
	<expression name="isContentSeasons">Container.Content(seasons)</expression>
	<expression name="isEpisode">String.IsEqual(ListItem.DBTYPE,episode)</expression>
	<expression name="isContentEpisodes">Container.Content(episodes)</expression>
	<expression name="isMusicvideo">String.IsEqual(ListItem.DBTYPE,musicvideo)</expression>
	<expression name="isContentMusicvideos">Container.Content(musicvideos)</expression>
	<expression name="isContentAddons">Container.Content(addons)</expression>
	<expression name="isArtist">String.IsEqual(ListItem.DBTYPE,artist)</expression>
	<expression name="isnotArtist">![String.IsEqual(ListItem.DBTYPE,artist)]</expression>
	<expression name="isContentArtists">Container.Content(artists)</expression>
	<expression name="isAlbum">String.IsEqual(ListItem.DBTYPE,album)</expression>
	<expression name="isContentAlbums">Container.Content(albums)</expression>
	<expression name="isSong">String.IsEqual(ListItem.DBTYPE,song)</expression>
	<expression name="isContentSongs">Container.Content(songs)</expression>
	<expression name="isContentPlaylists">Container.Content(playlists)</expression>
	<expression name="isEmptyIcon">String.IsEmpty(ListItem.Icon)</expression>
	<expression name="isnotEmptyIcon">![String.IsEmpty(ListItem.Icon)]</expression>
	<expression name="isEmptyPVRIcon">String.IsEmpty(ListItem.Icon)</expression>
	<expression name="isEmptyDBID">String.IsEmpty(ListItem.DBID)</expression>
	<expression name="isnotEmptyDBID">![String.IsEmpty(ListItem.DBID)]</expression>
	<expression name="isDefaultIcon">String.StartsWith(ListItem.Icon,Default)</expression>
	<expression name="isnotDefaultIcon">![String.StartsWith(ListItem.Icon,Default)]</expression>
	<expression name="isEnabledTouch">Skin.HasSetting(show-touchcontrols)</expression>
	<expression name="isEnabledParentDirectory">System.GetBool(filelists.showparentdiritems)</expression>
	<expression name="isnotEnabledParentDirectory">!System.GetBool(filelists.showparentdiritems)</expression>
	<expression name="isEnabledScrollbar">![String.IsEqual(Skin.String(show-scrollbar),$LOCALIZE[31877])]</expression>
	<expression name="isnotAlwaysScrollbar">![String.IsEqual(Skin.String(show-scrollbar),$LOCALIZE[31875])]</expression>
	<expression name="isParentFolder">ListItem.IsParentFolder</expression>
	<expression name="isnotParentFolder">!ListItem.IsParentFolder</expression>
	<expression name="isnotScrolling">![Container.Scrolling]</expression>
	<expression name="IsSearching">[Container(101).IsUpdating | Container(103).IsUpdating | Container(105).IsUpdating | Container(107).IsUpdating
									| Container(108).IsUpdating | Container(110).IsUpdating  Container(112).IsUpdating  | Container(114).IsUpdating 
									| Container(116).IsUpdating | Container(117).IsUpdating  Container(119).IsUpdating]</expression>
	<expression name="IsNumericSortLetter">[String.IsEqual(ListItem.SortLetter,0) | String.IsEqual(ListItem.SortLetter,1) | String.IsEqual(ListItem.SortLetter,2)
											| String.IsEqual(ListItem.SortLetter,3) | String.IsEqual(ListItem.SortLetter,4) | String.IsEqual(ListItem.SortLetter,5)
											| String.IsEqual(ListItem.SortLetter,6) | String.IsEqual(ListItem.SortLetter,7) | String.IsEqual(ListItem.SortLetter,8)
									 		| String.IsEqual(ListItem.SortLetter,9)]</expression>
	<expression name="IsNotNumericSortLetter">![String.IsEqual(ListItem.SortLetter,0) | String.IsEqual(ListItem.SortLetter,1) | String.IsEqual(ListItem.SortLetter,2)
												| String.IsEqual(ListItem.SortLetter,3) | String.IsEqual(ListItem.SortLetter,4) | String.IsEqual(ListItem.SortLetter,5)
												| String.IsEqual(ListItem.SortLetter,6) | String.IsEqual(ListItem.SortLetter,7) | String.IsEqual(ListItem.SortLetter,8)
									 			| String.IsEqual(ListItem.SortLetter,9)]</expression>
	<expression name="IsAlphaSortLetter">[String.IsEqual(ListItem.SortLetter,A) | String.IsEqual(ListItem.SortLetter,B) | String.IsEqual(ListItem.SortLetter,C)
											| String.IsEqual(ListItem.SortLetter,D) | String.IsEqual(ListItem.SortLetter,E) | String.IsEqual(ListItem.SortLetter,F)
											| String.IsEqual(ListItem.SortLetter,G) | String.IsEqual(ListItem.SortLetter,H) | String.IsEqual(ListItem.SortLetter,I)
									 		| String.IsEqual(ListItem.SortLetter,J) | String.IsEqual(ListItem.SortLetter,K) | String.IsEqual(ListItem.SortLetter,L)
											| String.IsEqual(ListItem.SortLetter,M) | String.IsEqual(ListItem.SortLetter,N) | String.IsEqual(ListItem.SortLetter,O)
											| String.IsEqual(ListItem.SortLetter,P) | String.IsEqual(ListItem.SortLetter,Q) | String.IsEqual(ListItem.SortLetter,R)
											| String.IsEqual(ListItem.SortLetter,S) | String.IsEqual(ListItem.SortLetter,T) | String.IsEqual(ListItem.SortLetter,U)
											| String.IsEqual(ListItem.SortLetter,V) | String.IsEqual(ListItem.SortLetter,W) | String.IsEqual(ListItem.SortLetter,X)
											| String.IsEqual(ListItem.SortLetter,Y) | String.IsEqual(ListItem.SortLetter,Z)	]</expression>
	<expression name="IsNotAlphaSortLetter">![String.IsEqual(ListItem.SortLetter,A) | String.IsEqual(ListItem.SortLetter,B) | String.IsEqual(ListItem.SortLetter,C)
											| String.IsEqual(ListItem.SortLetter,D) | String.IsEqual(ListItem.SortLetter,E) | String.IsEqual(ListItem.SortLetter,F)
											| String.IsEqual(ListItem.SortLetter,G) | String.IsEqual(ListItem.SortLetter,H) | String.IsEqual(ListItem.SortLetter,I)
									 		| String.IsEqual(ListItem.SortLetter,J) | String.IsEqual(ListItem.SortLetter,K) | String.IsEqual(ListItem.SortLetter,L)
											| String.IsEqual(ListItem.SortLetter,M) | String.IsEqual(ListItem.SortLetter,N) | String.IsEqual(ListItem.SortLetter,O)
											| String.IsEqual(ListItem.SortLetter,P) | String.IsEqual(ListItem.SortLetter,Q) | String.IsEqual(ListItem.SortLetter,R)
											| String.IsEqual(ListItem.SortLetter,S) | String.IsEqual(ListItem.SortLetter,T) | String.IsEqual(ListItem.SortLetter,U)
											| String.IsEqual(ListItem.SortLetter,V) | String.IsEqual(ListItem.SortLetter,W) | String.IsEqual(ListItem.SortLetter,X)
											| String.IsEqual(ListItem.SortLetter,Y) | String.IsEqual(ListItem.SortLetter,Z)	]</expression>
	<include file="Defaults.xml"/>

	<include file="Includes_Variables.xml"/>

	<include name="defaultskinsettings"><!-- various default settings  -->
		<onload>RunScript(script.embuary.helper,action=getkodisetting,setting=locale.country,strip=timeformat)</onload>
		<onload condition="!Skin.HasSetting(FontCheck)">RunScript(script.embuary.helper,action=fontchange,locales=ja+zh+ar+he+ko+vi+bn+my+hi+ks+km+ms,font="Kodi Default")</onload>
		<onload condition="!Skin.HasSetting(FontCheck)">Skin.ToggleSetting(FontCheck)</onload>
	</include>
	<!-- Postion and size of fullscreen image -->
	<include name="fullscreenimage">
		<left>0</left>
		<top>0</top>
		<width>1920</width>
		<height>1080</height>
	</include>
	<include name="fadebackground">
		<control type="image">
			<include>fullscreenimage</include>
			<texture>background-mask.png</texture>
			<colordiffuse>mask-background</colordiffuse>
			<aspectratio>stretch</aspectratio>
			<visible>$EXP[isnotFullscreenVideo]</visible>
		</control>
	</include>
	<include name="background">
		<control type="group">
			<control type="fadelabel" id="300000"><!-- Randomizer for plugin-free multiple fanart -->
				<top>-1000</top> <!-- Don't need to see it, but can't change its visibility. Put it off screen -->
				<width>1</width>
				<height>1</height>
				<info>ListItem.Art(fanart1)</info>
				<info>ListItem.Art(fanart2)</info>
				<info>ListItem.Art(fanart3)</info>
				<info>ListItem.Art(fanart4)</info>
				<info>ListItem.Art(fanart5)</info>
				<info>ListItem.Art(fanart6)</info>
				<!-- tvshow.fanart are filled with the series fanart when navigating season and episode lists -->
				<info>ListItem.Art(tvshow.fanart1)</info>
				<info>ListItem.Art(tvshow.fanart2)</info>
				<info>ListItem.Art(tvshow.fanart3)</info>
				<info>ListItem.Art(tvshow.fanart4)</info>
				<info>ListItem.Art(tvshow.fanart5)</info>
				<info>ListItem.Art(tvshow.fanart6)</info>
				<randomize>true</randomize>
				<pauseatend>6600</pauseatend> <!-- Time to show each image -->
				<!-- No scrolling so only the pauseatend above (plus a short fade-in) affects length of time each image shown -->
				<scroll>false</scroll>
				<scrollout>false</scrollout>
				<!-- Resets the timer when navigating to a new item, so each item's first visible fanart will
					show for the full amount of time -->
				<resetonlabelchange>true</resetonlabelchange>
			</control>
			<control type="image">
				<include>fullscreenimage</include>
				<texture background="false">$VAR[BackgndImage]</texture>
				<colordiffuse>$VAR[BackgndImageVisibity]</colordiffuse>
				<aspectratio>stretch</aspectratio>
				<fadetime>400</fadetime>
				<visible>![Skin.HasSetting(background-playingmedia) + Player.HasVideo]</visible>
			</control>
			<control type="group">
				<visible>Skin.HasSetting(background-playingmedia) + [[$EXP[isVerticalHome] + Window.IsVisible(home)] | !Window.IsVisible(home)]</visible>
				<control type="videowindow">
					<include>fullscreenimage</include>
					<visible>Player.HasVideo</visible>
				</control>
				<control type="visualisation">
					<include>fullscreenimage</include>
					<animation effect="fade" time="200">VisibleChange</animation>
					<visible>Player.HasAudio + String.IsEmpty(Window(videos).Property(PlayingBackgroundMedia))</visible>
				</control>
				<control type="image"><!-- Use mask background to fade video or visualisation -->
					<include>fullscreenimage</include>
					<texture>background-mask.png</texture>
					<colordiffuse>$VAR[BackgndMaskVisibity]</colordiffuse>
					<aspectratio>stretch</aspectratio>
				</control>
			</control>
		</control>
	</include>
	<include name="backgroundsimple">
		<control type="group">
			<control type="image">
				<include>fullscreenimage</include>
				<texture background="false">$VAR[BackgndSimpleImage]</texture>
				<colordiffuse>$VAR[BackgndImageVisibity]</colordiffuse>
				<aspectratio>stretch</aspectratio>
				<fadetime>400</fadetime>
				<visible>!Container().Scrolling + ![Skin.HasSetting(background-playingmedia) + Player.HasVideo]</visible>
			</control>
			<control type="group">
				<visible>Skin.HasSetting(background-playingmedia) + [[$EXP[isVerticalHome] + Window.IsVisible(home)] | !Window.IsVisible(home)]</visible>
				<control type="videowindow">
					<include>fullscreenimage</include>
					<visible>Player.HasVideo</visible>
				</control>
				<control type="visualisation">
					<include>fullscreenimage</include>
					<animation effect="fade" time="200">VisibleChange</animation>
					<visible>Player.HasAudio + String.IsEmpty(Window(videos).Property(PlayingBackgroundMedia))</visible>
				</control>
				<control type="image"><!-- Use mask background to fade video or visualisation -->
					<include>fullscreenimage</include>
					<texture>background-mask.png</texture>
					<colordiffuse>$VAR[BackgndMaskVisibity]</colordiffuse>
					<aspectratio>stretch</aspectratio>
				</control>
			</control>
		</control>
	</include>
	<include name="player-mediaicon">
		<control type="image" id="1"><!-- Player Media Icon -->
			<left>12</left>
			<top>746</top>
			<width>320</width>
			<height>320</height>
			<texture>$VAR[PlayerVideoArt]</texture>
			<align>center</align>
			<aligny>bottom</aligny>
			<aspectratio>keep</aspectratio>
			<visible>[$EXP[isFullscreenVideo]] + ![Window.IsActive(musicosd)]</visible>
			<animation effect="fade" time="200">VisibleChange</animation>
		</control>
	</include>
	<include name="page-info">
		<control type="group">
			<visible>!System.ScreenSaverActive</visible>
			<animation effect="slide" end="282,0" condition="$EXP[isEnabledTouch]">Conditional</animation>
			<control type="image"><!-- RSS Logo -->
				<left>8</left>
				<top>1026</top>
				<width>32</width>
				<height>32</height>
				<aspectratio>keep</aspectratio>
				<texture>rss.png</texture>
			</control>
			<control type="rss">
				<left>40</left>
				<top>1018</top>
				<width>1880</width>
				<height>33</height>
				<font>apptv20</font>
				<urlset>1</urlset>
				<textcolor>info-text</textcolor>
				<titlecolor>rss-title-text</titlecolor>
				<headlinecolor>rss-headline-text</headlinecolor>
			</control>
		</control>
	</include>
	<include name="sortletternotification">
		<control type="group">
			<visible>Container.Scrolling + !Window.IsVisible(progressdialog) + [$EXP[isContentMovies] | $EXP[isContentTvshows] | $EXP[isContentAlbums] |
			$EXP[isContentArtists]]</visible>
			<animation effect="fade" time="200">Visible</animation>
			<animation effect="fade" time="200" delay="500">Hidden</animation>
			<animation condition="Skin.HasSetting(show-letterbar) + [$EXP[isContentMovies]|$EXP[isContentTvshows]|$EXP[isContentAlbums]|$EXP[isContentArtists]]" effect="fade" start="100" end="0" reversible="true">Conditional</animation>
			<left>897</left>
			<top>36</top>
			<width>123</width>
			<height>105</height>
			<control type="image">
				<left>0</left>
				<top>0</top>
				<width>123</width>
				<height>105</height>
				<texture border="14">button-menu-background.png</texture>
				<visible>!String.IsEmpty(ListItem.SortLetter)</visible>
			</control>
			<control type="label">
				<left>0</left>
				<top>12</top>
				<width>123</width>
				<height>72</height>
				<align>center</align>
				<label>$INFO[ListItem.SortLetter]</label>
				<font>apptv48</font>
			</control>
		</control>
	</include>
	<include name="fake-overlay">
		<control type="group">
			<visible>Skin.HasSetting(media-overlay) + !Window.IsActive(playercontrols)</visible>
			<control type="videowindow">
				<left>30</left>
				<top>12</top>
				<width>240</width>
				<height>144</height>
				<visible>Player.HasVideo + !Skin.HasSetting(background-playingmedia)</visible>
			</control>
			<control type="image">
				<left>36</left>
				<top>6</top>
				<width>144</width>
				<height>144</height>
				<texture background="true">$VAR[FakeOverlayIcon]</texture>
				<aspectratio>keep</aspectratio>
				<visible>Player.HasAudio + String.IsEmpty(Window(videos).Property(PlayingBackgroundMedia))</visible>
			</control>
			<control type="label">
				<left>280</left>
				<top>3</top>
				<width>520</width>
				<height>38</height>
				<label>$VAR[FakeOverlayLine1]</label>
				<font>apptv22</font>
				<textcolor>listselected-text</textcolor>
			</control>
			<control type="label">
				<left>280</left>
				<top>45</top>
				<width>520</width>
				<height>30</height>
				<label>$VAR[FakeOverlayLine2]</label>
				<font>apptv20</font>
			</control>
			<control type="label">
				<left>280</left>
				<top>80</top>
				<width>520</width>
				<height>30</height>
				<label>$VAR[FakeOverlayLine3]</label>
				<font>apptv20</font>
			</control>
			<control type="label">
				<left>280</left>
				<top>115</top>
				<width>520</width>
				<height>30</height>
				<label>$VAR[FakeOverlayLine4]</label>
				<font>apptv20</font>
			</control>
		</control>
	</include>
	<include name="CustomHorzListitem">
		<control type="label">
			<left>12</left>
			<top>12</top>
			<width>291</width>
			<height>33</height>
			<font>apptv22</font>
			<align>center</align>
			<label fallback="20333">$INFO[ListItem.Label]</label>
			<animation effect="fade" start="100" end="60" condition="!ListItem.Property(isActive) | Control.HasFocus(402)">Conditional</animation>
		</control>
	</include>
	<include name="CustomHorzFocusitem">
		<control type="group">
			<animation effect="fade" start="100" end="60" condition="String.IsEmpty(ListItem.Property(isActive))">Conditional</animation>
			<control type="image">
				<left>0</left>
				<top>0</top>
				<width>315</width>
				<height>63</height>
				<texture border="9">button-default-focus.png</texture>
			</control>
			<control type="label">
				<left>12</left>
				<top>12</top>
				<width>291</width>
				<height>33</height>
				<font>apptv22</font>
				<align>center</align>
				<label fallback="20333">$INFO[ListItem.Label]</label>
			</control>
		</control>
	</include>
	<include name="shelf-defaulticon">
		<param name="defaulticon"/>
		<definition>
			<control type="image">
				<left>812</left>
				<top>96</top>
				<width>296</width>
				<height>296</height>
				<texture>$PARAM[defaulticon]</texture>
			</control>
		</definition>
	</include>
	<include name="fullscreendummy"><!-- Dummy button for mouse control -->
		<control type="button" id="3550">
			<left>0</left>
			<top>0</top>
			<width>100%</width>
			<height>100%</height>
			<texturefocus>blank.png</texturefocus>
			<texturenofocus>blank.png</texturenofocus>
			<visible>$EXP[isEnabledTouch]</visible>
		</control>
	</include>
	<include name="screen-name">
		<param name="screenlabel"/>
		<param name="listitems"/>
		<definition>
			<control type="grouplist">
				<left>1400</left>
				<top>30</top>
				<width>auto</width>
				<height>108</height>
				<align>left</align>
				<orientation>horizontal</orientation>
				<control type="label">
					<width max="400">auto</width>
					<height>93</height>
					<label>$PARAM[screenlabel]</label>
					<font>apptv30</font>
					<wrapmultiline>true</wrapmultiline>
					<aligny>top</aligny>
				</control>
				<control type="label">
					<width max="120">auto</width>
					<height>64</height>
					<label>$INFO[$PARAM[listitems],(,)]</label>
					<visible>Integer.IsGreater($PARAM[listitems],0)</visible>
				</control>
			</control>
		</definition>
	</include>
	<!-- Fake Equaliser (listitem is being played) -->
	<include name="fake-equaliser">
		<param name="feleft"/>
		<param name="fetop"/>
		<param name="fesize" default="64"/>
		<definition>
			<control type="image">
				<left>$PARAM[feleft]</left>
				<top>$PARAM[fetop]</top>
				<width>$PARAM[fesize]</width>
				<height>$PARAM[fesize]</height>
				<texture>equaliser.gif</texture>
				<visible>ListItem.IsPlaying</visible>
			</control>
		</definition>
	</include>
	<include name="osd-togglebutton">
		<param name="osdid"/>
		<param name="osdsize" default="64"/>
		<param name="osdtexture"/>
		<param name="osdusealttexture"/>
		<param name="osdalttexture"/>
		<param name="osdaction"/>
		<param name="osdaction2" default="noop"/>
		<param name="osdup" default="noop"/>
		<param name="osdvisible" default="true"/>
		<definition>
			<control type="togglebutton" id="$PARAM[osdid]">
				<width>$PARAM[osdsize]</width>
				<height>$PARAM[osdsize]</height>
				<texturefocus>$PARAM[osdtexture]-focus.png</texturefocus>
				<texturenofocus>$PARAM[osdtexture].png</texturenofocus>
				<usealttexture>$PARAM[osdusealttexture]</usealttexture>
				<alttexturefocus>$PARAM[osdalttexture]-focus.png</alttexturefocus>
				<alttexturenofocus>$PARAM[osdalttexture]-focus.png</alttexturenofocus>
				<onclick>$PARAM[osdaction]</onclick>
				<onclick>$PARAM[osdaction2]</onclick>
				<onup>$PARAM[osdup]</onup>
				<include>focus-zoom</include>
				<visible>$PARAM[osdvisible]</visible>
			</control>
		</definition>
	</include>
	<include name="osd-button">
		<param name="osdid"/>
		<param name="osdsize" default="64"/>
		<param name="osdtexture"/>
		<param name="osdaction"/>
		<param name="osdaction2" default="noop"/>
		<param name="osdup" default="noop"/>
		<param name="osdvisible" default="true"/>
		<definition>
			<control type="button" id="$PARAM[osdid]">
				<width>$PARAM[osdsize]</width>
				<height>$PARAM[osdsize]</height>
				<texturefocus>$PARAM[osdtexture]-focus.png</texturefocus>
				<texturenofocus>$PARAM[osdtexture].png</texturenofocus>
				<onclick>$PARAM[osdaction]</onclick>
				<onclick>$PARAM[osdaction2]</onclick>
				<onup>$PARAM[osdup]</onup>
				<include>focus-zoom</include>
				<visible>$PARAM[osdvisible]</visible>
			</control>
		</definition>
	</include>
	<include name="illegal-action">
		<param name="controlid"/>
		<param name="returnid"/>
		<definition>
			<control type="button" id="$PARAM[controlid]">
				<left>-10</left>
				<top>-10</top>
				<width>1</width>
				<height>1</height>
				<onfocus>SetFocus($PARAM[returnid])</onfocus>
				<onfocus>ActivateWindow(1157)</onfocus>
			</control>
		</definition>
	</include>
	<include name="listitem-count">
		<param name="left" default="0"/>
		<param name="top" default="0"/>
		<param name="count"/>
		<param name="size" default="100"/>
		<definition>
			<control type="group">
				<visible>Integer.IsGreater($PARAM[count],0)</visible>
				<animation condition="true" effect="zoom" start="100" end="$PARAM[size]" center="auto">Conditional</animation>
				<left>$PARAM[left]</left>
				<top>$PARAM[top]</top>
				<control type="image">
					<left>22</left>
					<top>0</top>
					<width>40</width>
					<height>40</height>
					<texture border="16,0,16,0">overlaynumberitems.png</texture>
					<visible>Integer.IsLess($PARAM[count],10)</visible>
				</control>
				<control type="image">
					<left>10</left>
					<top>0</top>
					<width>64</width>
					<height>40</height>
					<texture border="16,0,16,0">overlaynumberitems.png</texture>
					<animation condition="Integer.IsGreater($PARAM[count],99)" effect="zoom" end="140,100" center="auto">Conditional</animation>
					<visible>Integer.IsGreater($PARAM[count],9)</visible>
				</control>
				<control type="label">
					<left>15</left>
					<top>4</top>
					<width>54</width>
					<height>30</height>
					<font>apptv20</font>
					<label>$INFO[$PARAM[count]]</label>
					<textcolor>white</textcolor>
					<shadowcolor/>
					<align>center</align>
				</control>
			</control>
		</definition>
	</include>
	<include name="use-alttexture">
		<param name="visiblecondition"/>
		<definition>
			<usealttexture>$PARAM[visiblecondition]</usealttexture>
		</definition>
	</include>
	<include name="listpanelitems">
		<param name="itemcustombase"/>
		<param name="itemthumb"/>
		<param name="itemlabel"/>
		<param name="itemmenuheading"/>
		<param name="itemmenuid"/>
		<param name="itemcondition"/>
		<param name="itemtoggle"/>
		<definition>
			<item>
				<thumb>$PARAM[itemthumb]</thumb>
				<label>$PARAM[itemlabel]</label>
				<property name="isActive">true</property>
				<property name="visibleToggle">$PARAM[itemtoggle]</property>
				<property name="customBase">$PARAM[itemcustombase]</property>
				<property name="menuHeading">$PARAM[itemmenuheading]</property>
				<property name="menuID">$PARAM[itemmenuid]</property>
				<onclick>SetProperty(ListActive,true,settings)</onclick>
				<onclick>SetProperty(ListLabel,$PARAM[itemlabel],settings)</onclick>
				<onclick>SetProperty(ListID,$PARAM[itemmenuid],settings)</onclick>
				<onclick>SetProperty(ListToggle,$PARAM[itemtoggle],settings)</onclick>
				<onclick>SetProperty(ListCustomBase,$PARAM[itemcustombase],settings)</onclick>
				<onclick>SetProperty(CurrentType,$INFO[Skin.String($PARAM[itemcustombase],,.Type)],settings)</onclick>
				<onclick>SetProperty(CurrentAction,$PARAM[itemcustombase].Path,settings)</onclick>
				<onclick>SetProperty(CurrentLabel,$PARAM[itemcustombase].Label,settings)</onclick>
				<onclick>SetProperty(CurrentIcon,$PARAM[itemcustombase].Icon,settings)</onclick>
				<onclick>ActivateWindow(1153)</onclick>
				<visible>$PARAM[itemcondition]</visible>
			</item>
			<item>
				<thumb>$PARAM[itemthumb]</thumb>
				<label>$PARAM[itemlabel]</label>
				<property name="isActive"/>
				<property name="visibleToggle">$PARAM[itemtoggle]</property>
				<property name="customBase">$PARAM[itemcustombase]</property>
				<property name="menuHeading">$PARAM[itemmenuheading]</property>
				<property name="menuID">$PARAM[itemmenuid]</property>
				<onclick>ClearProperty(ListActive,settings)</onclick>
				<onclick>SetProperty(ListLabel,$PARAM[itemlabel],settings)</onclick>
				<onclick>SetProperty(ListID,$PARAM[itemmenuid],settings)</onclick>
				<onclick>SetProperty(ListToggle,$PARAM[itemtoggle],settings)</onclick>
				<onclick>SetProperty(ListCustomBase,$PARAM[itemcustombase],settings)</onclick>
				<onclick>SetProperty(CurrentType,$INFO[Skin.String($PARAM[itemcustombase],,.Type)],settings)</onclick>
				<onclick>SetProperty(CurrentAction,$PARAM[itemcustombase].Path,settings)</onclick>
				<onclick>SetProperty(CurrentLabel,$PARAM[itemcustombase].Label,settings)</onclick>
				<onclick>SetProperty(CurrentIcon,$PARAM[itemcustombase].Icon,settings)</onclick>
				<onclick>ActivateWindow(1153)</onclick>
				<visible>!$PARAM[itemcondition]</visible>
			</item>
		</definition>
	</include>
	<include name="WidgetLabel">
		<param name="widget_id"/>
		<param name="widget_parentid"/>
		<param name="widget_left"/>
		<param name="widget_top"/>
		<param name="widget_label"/>
		<definition>
			<control type="label" id="$PARAM[widget_id]2">
				<left>$PARAM[widget_left]</left>
				<top>$PARAM[widget_top]</top>
				<width>689</width>
				<height>50</height>
				<font>apptv20</font>
				<align>left</align>
				<label>$PARAM[widget_label]</label>
				<visible>Container($PARAM[widget_parentid]).IsUpdating|Integer.IsGreater(Container($PARAM[widget_parentid]).NumItems,1)|Container($PARAM[widget_id]).IsUpdating|						Integer.IsGreater(Container($PARAM[widget_id]).NumItems,0)</visible>
			</control>
		</definition>
	</include>
	<include name="WidgetPoster">
		<param name="widget_id"/>
		<param name="widget_parentid"/>
		<param name="widget_left"/>
		<param name="widget_top"/>
		<param name="widget_onup"/>
		<param name="widget_ondown"/>
		<param name="widget_path"/>
		<param name="widget_target"/>
		<definition>
			<visible>[Container($PARAM[widget_parentid]).IsUpdating|Integer.IsGreater(Container($PARAM[widget_parentid]).NumItems,1)|Container($PARAM[widget_id]).IsUpdating|						Integer.IsGreater(Container($PARAM[widget_id]).NumItems,0)]</visible>
			<control type="panel" id="$PARAM[widget_id]">
				<left>$PARAM[widget_left]</left>
				<top>$PARAM[widget_top]</top>
				<width>1750</width>
				<height>350</height>
				<scrolltime tween="cubic" easing="out">200</scrolltime>
				<orientation>horizontal</orientation>
				<onleft>9000</onleft>
				<onright>9000</onright>
				<onup>$PARAM[widget_onup]</onup>
				<ondown>$PARAM[widget_ondown]</ondown>
				<onback>SetFocus($PARAM[widget_parentid])</onback>
				<itemlayout width="250">
					<control type="image">
						<left>10</left>
						<top>8</top>
						<width>230</width>
						<height>268</height>
						<aspectratio scalediffuse="false">keep</aspectratio>
						<texture diffuse="mask-rect.png" background="true">$VAR[WidgetIconPoster]</texture>
						<align>center</align>
						<aligny>center</aligny>
					</control>
				</itemlayout>
				<focusedlayout width="250">
					<control type="image">
						<left>10</left>
						<top>8</top>
						<width>230</width>
						<height>268</height>
						<aspectratio scalediffuse="false">keep</aspectratio>
						<texture diffuse="mask-rect.png" background="true">$VAR[WidgetIconPoster]</texture>
						<align>center</align>
						<aligny>center</aligny>
						<animation effect="zoom" start="100" end="106" center="auto" time="200" tween="back" easing="out" reversible="false">focus</animation>
					</control>
					<control type="textbox">
						<left>0</left>
						<top>278</top>
						<height>64</height>
						<width>250</width>
						<font>apptv18</font>
						<align>center</align>
						<aligny>top</aligny>
						<label>$INFO[ListItem.Label]</label>
						<animation effect="fade" time="100" delay="100">Focus</animation>
						<visible>Control.HasFocus($PARAM[widget_id])</visible>
					</control>
				</focusedlayout>
				<content target="$PARAM[widget_target]">$PARAM[widget_path]</content>
			</control>
		</definition>
	</include>
	<include name="WidgetWide">
		<param name="widget_id"/>
		<param name="widget_parentid"/>
		<param name="widget_left"/>
		<param name="widget_top"/>
		<param name="widget_onup"/>
		<param name="widget_ondown"/>
		<param name="widget_path"/>
		<param name="widget_target"/>
		<definition>
			<visible>[Container($PARAM[widget_parentid]).IsUpdating|Integer.IsGreater(Container($PARAM[widget_parentid]).NumItems,1)|Container($PARAM[widget_id]).IsUpdating|						Integer.IsGreater(Container($PARAM[widget_id]).NumItems,0)]</visible>
			<control type="panel" id="$PARAM[widget_id]">
				<left>$PARAM[widget_left]</left>
				<top>$PARAM[widget_top]</top>
				<width>1750</width>
				<height>300</height>
				<scrolltime tween="cubic" easing="out">200</scrolltime>
				<orientation>horizontal</orientation>
				<onleft>9000</onleft>
				<onright>9000</onright>
				<onup>$PARAM[widget_onup]</onup>
				<ondown>$PARAM[widget_ondown]</ondown>
				<onback>SetFocus($PARAM[widget_parentid])</onback>
				<itemlayout width="350">
					<control type="image">
						<left>15</left>
						<top>40</top>
						<width>320</width>
						<height>180</height>
						<aligny>top</aligny>
						<aspectratio>stretch</aspectratio>
						<texture background="true">$VAR[TVShowLandscape]</texture>
						<animation effect="zoom" start="100" end="104" center="auto" time="200" tween="back" easing="out" reversible="false">focus</animation>
					</control>
				</itemlayout>
				<focusedlayout width="350">
					<control type="image">
						<left>15</left>
						<top>40</top>
						<width>320</width>
						<height>180</height>
						<aligny>top</aligny>
						<aspectratio>stretch</aspectratio>
						<texture background="true">$VAR[TVShowLandscape]</texture>
						<animation effect="zoom" start="100" end="110" center="auto" time="200" tween="back" easing="out" reversible="false">focus</animation>
					</control>
					<control type="textbox">
						<left>0</left>
						<top>230</top>
						<height>64</height>
						<width>350</width>
						<font>apptv18</font>
						<align>center</align>
						<aligny>top</aligny>
						<label>$INFO[ListItem.Label]</label>
						<animation effect="fade" time="100" delay="100">Focus</animation>
						<visible>Control.HasFocus($PARAM[widget_id])</visible>
					</control>
				</focusedlayout>
				<content target="$PARAM[widget_target]">$PARAM[widget_path]</content>
			</control>
		</definition>
	</include>
	<include name="WidgetSquare">
		<param name="widget_id"/>
		<param name="widget_parentid"/>
		<param name="widget_left"/>
		<param name="widget_top"/>
		<param name="widget_onup"/>
		<param name="widget_ondown"/>
		<param name="widget_path"/>
		<param name="widget_target"/>
		<definition>
			<visible>[Container($PARAM[widget_id]).IsUpdating | Integer.IsGreater(Container($PARAM[widget_id]).NumItems,0)]</visible>
			<control type="panel" id="$PARAM[widget_id]">
				<left>$PARAM[widget_left]</left>
				<top>$PARAM[widget_top]</top>
				<width>1750</width>
				<height>340</height>
				<scrolltime tween="cubic" easing="out">200</scrolltime>
				<orientation>horizontal</orientation>
				<onleft>9000</onleft>
				<onright>9000</onright>
				<onup>$PARAM[widget_onup]</onup>
				<ondown>$PARAM[widget_ondown]</ondown>
				<onback>SetFocus($PARAM[widget_parentid])</onback>
				<itemlayout width="350">
					<control type="image">
						<left>46</left>
						<top>6</top>
						<width>256</width>
						<height>256</height>
						<aspectratio scalediffuse="true">stretch</aspectratio>
						<aligny>top</aligny>
						<texture diffuse="mask-squ.png" background="true">$INFO[ListItem.Icon]</texture>
					</control>
				</itemlayout>
				<focusedlayout width="350">
					<control type="image">
						<left>46</left>
						<top>6</top>
						<width>256</width>
						<height>256</height>
						<aspectratio scalediffuse="true">stretch</aspectratio>
						<aligny>top</aligny>
						<texture diffuse="mask-squ.png" background="true">$INFO[ListItem.Icon]</texture>
						<animation effect="zoom" start="100" end="104" center="auto" time="200" tween="back" easing="out" reversible="false">focus</animation>
					</control>
					<control type="textbox">
						<left>0</left>
						<top>270</top>
						<height>64</height>
						<width>350</width>
						<font>apptv18</font>
						<align>center</align>
						<aligny>top</aligny>
						<label>$INFO[ListItem.Label]</label>
						<animation effect="fade" time="100" delay="100">Focus</animation>
						<visible>Control.HasFocus($PARAM[widget_id])</visible>
					</control>
				</focusedlayout>
				<content target="$PARAM[widget_target]">$PARAM[widget_path]</content>
			</control>
		</definition>
	</include>
	<include name="page-toggle">
		<width>24</width>
		<height>24</height>
		<texturefocus>groupunfocused.png</texturefocus>
		<texturenofocus>groupunfocused.png</texturenofocus>
		<alttexturefocus>groupfocused.png</alttexturefocus>
		<alttexturenofocus>groupfocused.png</alttexturenofocus>
		<onclick>noop</onclick>
	</include>
	<include name="page-indicator">
		<param name="indicatorleft" default="0"/>
		<param name="indicatortop" default="0"/>
		<param name="indicatorwidth" default="0"/>
		<param name="indicatorheight" default="0"/>
		<param name="indicatororientation" default="horizontal"/>
		<param name="grp1indicate"/>
		<param name="grp1visible" default="false"/>
		<param name="grp2indicate"/>
		<param name="grp2visible" default="false"/>
		<param name="grp3indicate"/>
		<param name="grp3visible" default="false"/>
		<param name="grp4indicate"/>
		<param name="grp4visible" default="false"/>
		<param name="grp5indicate"/>
		<param name="grp5visible" default="false"/>
		<definition>
			<control type="grouplist">
				<left>$PARAM[indicatorleft]</left>
				<top>$PARAM[indicatortop]</top>
				<width>$PARAM[indicatorwidth]</width>
				<height>$PARAM[indicatorheight]</height>
				<orientation>$PARAM[indicatororientation]</orientation>
				<itemgap>0</itemgap>
				<align>center</align>
				<control type="togglebutton">
					<include>page-toggle</include>
					<usealttexture>$PARAM[grp1indicate]</usealttexture>
					<visible>$PARAM[grp1visible]</visible>
				</control>
				<control type="togglebutton">
					<include>page-toggle</include>
					<usealttexture>$PARAM[grp2indicate]</usealttexture>
					<visible>$PARAM[grp2visible]</visible>
				</control>
				<control type="togglebutton">
					<include>page-toggle</include>
					<usealttexture>$PARAM[grp3indicate]</usealttexture>
					<visible>$PARAM[grp3visible]</visible>
				</control>
				<control type="togglebutton">
					<include>page-toggle</include>
					<usealttexture>$PARAM[grp4indicate]</usealttexture>
					<visible>$PARAM[grp4visible]</visible>
				</control>
				<control type="togglebutton">
					<include>page-toggle</include>
					<usealttexture>$PARAM[grp5indicate]</usealttexture>
					<visible>$PARAM[grp5visible]</visible>
				</control>
			</control>
		</definition>
	</include>
	<include name="page-offscreen-vertical">
		<param name="indicator1left" default="0"/>
		<param name="indicator1top" default="0"/>
		<param name="indicator2left" default="0"/>
		<param name="indicator2top" default="0"/>
		<param name="indicatorsize" default="0"/>
		<param name="indicatorcontainer"/>
		<definition>
			<control type="button" id="$PARAM[indicatorcontainer]51">
				<left>$PARAM[indicator1left]</left>
				<top>$PARAM[indicator1top]</top>
				<height>$PARAM[indicatorsize]</height>
				<width>$PARAM[indicatorsize]</width>
				<texturefocus>scroll-up-focus.png</texturefocus>
				<texturenofocus>scroll-up.png</texturenofocus>
				<onclick>Control.Move($PARAM[indicatorcontainer],-1)</onclick>
				<visible>Container($PARAM[indicatorcontainer]).HasPrevious + Integer.IsGreater(Container($PARAM[indicatorcontainer]).NumItems,0) + Control.IsVisible($PARAM[indicatorcontainer])</visible>
			</control>
			<control type="button" id="$PARAM[indicatorcontainer]52">
				<left>$PARAM[indicator2left]</left>
				<top>$PARAM[indicator2top]</top>
				<height>$PARAM[indicatorsize]</height>
				<width>$PARAM[indicatorsize]</width>
				<texturefocus>scroll-down-focus.png</texturefocus>
				<texturenofocus>scroll-down.png</texturenofocus>
				<onclick>Control.Move($PARAM[indicatorcontainer],1)</onclick>
				<visible>Container($PARAM[indicatorcontainer]).HasNext + Integer.IsGreater(Container($PARAM[indicatorcontainer]).NumItems,0) + Control.IsVisible($PARAM[indicatorcontainer])</visible>
			</control>
		</definition>
	</include>
	<include name="page-offscreen-horizontal">
		<param name="indicator1left" default="0"/>
		<param name="indicator1top" default="0"/>
		<param name="indicator2left" default="0"/>
		<param name="indicator2top" default="0"/>
		<param name="indicatorsize" default="0"/>
		<param name="indicatorcontainer"/>
		<definition>
			<control type="button" id="$PARAM[indicatorcontainer]53">
				<left>$PARAM[indicator1left]</left>
				<top>$PARAM[indicator1top]</top>
				<height>$PARAM[indicatorsize]</height>
				<width>$PARAM[indicatorsize]</width>
				<texturefocus>scroll-left-focus.png</texturefocus>
				<texturenofocus>scroll-left.png</texturenofocus>
				<onclick>Control.Move($PARAM[indicatorcontainer],-1)</onclick>
				<visible>Container($PARAM[indicatorcontainer]).HasPrevious + Integer.IsGreater(Container($PARAM[indicatorcontainer]).NumItems,0) + Control.IsVisible($PARAM[indicatorcontainer])</visible>
			</control>
			<control type="button" id="$PARAM[indicatorcontainer]54">
				<left>$PARAM[indicator2left]</left>
				<top>$PARAM[indicator2top]</top>
				<height>$PARAM[indicatorsize]</height>
				<width>$PARAM[indicatorsize]</width>
				<texturefocus>scroll-right-focus.png</texturefocus>
				<texturenofocus>scroll-right.png</texturenofocus>
				<onclick>Control.Move($PARAM[indicatorcontainer],1)</onclick>
				<visible>Container($PARAM[indicatorcontainer]).HasNext + Integer.IsGreater(Container($PARAM[indicatorcontainer]).NumItems,0) + Control.IsVisible($PARAM[indicatorcontainer])</visible>
			</control>
		</definition>
	</include>
	<include name="Object_NumericLetter">
		<control type="label">
			<width>30</width>
			<height>30</height>
			<textcolor>button-text</textcolor>
			<label>#</label>
			<font>apptv18</font>
			<align>center</align>
			<visible>$EXP[IsNotNumericSortLetter] | [Control.HasFocus($PARAM[searchbtn])]</visible>
		</control>
		<control type="label">
			<width>30</width>
			<height>30</height>
			<textcolor>listselected-text</textcolor>
			<label>#</label>
			<font>apptv20</font>
			<align>center</align>
			<animation condition="true" effect="zoom" start="100" end="130" center="auto">Conditional</animation>
			<visible>[!Control.HasFocus($PARAM[searchbtn])] + $EXP[IsNumericSortLetter]</visible>	
		</control>
	</include>
	<include name="Object_AlphabetLetter">
		<control type="label">
			<width>30</width>
			<height>30</height>
			<textcolor>button-text</textcolor>
			<label>$PARAM[letter]</label>
			<font>apptv18</font>
			<align>center</align>
			<visible>!String.IsEqual(ListItem.SortLetter,$PARAM[letter])</visible>
		</control>
		<control type="label">
			<width>30</width>
			<height>30</height>
			<textcolor>listselected-text</textcolor>
			<label>$PARAM[letter]</label>
			<font>apptv20</font>
			<align>center</align>
			<animation condition="true" effect="zoom" start="100" end="130" center="auto">Conditional</animation>
			<visible>String.IsEqual(ListItem.SortLetter,$PARAM[letter])</visible>
		</control>
	</include>
	<include name="letterbar-vertical">
		<param name="searchleft"/>
		<param name="searchtop"/>
		<param name="letterbarleft"/>
		<param name="letterbartop"/>
		<param name="searchid"/>
		<param name="letterbarid"/>
		<param name="scrollbarid"/>
		<param name="listitemid"/>
		<param name="illegalexitsearch" default="noop"/>
		<param name="illegalexitbar" default="noop"/>
		<param name="letterbarvisible"/>
		<definition>
			<control type="group">
				<visible>$PARAM[letterbarvisible]</visible>
				<control type="button" id="$PARAM[letterbarid]">
					<left>-100</left>
					<top>-100</top>
					<width>30</width>
					<height>30</height>
					<texturefocus />
					<font />
					<onleft>$PARAM[listitemid]</onleft>
					<onright>$PARAM[scrollbarid]</onright>
					<onup condition="$EXP[IsNumericSortLetter]">SetFocus($PARAM[searchid])</onup>
					<onup condition="$EXP[IsNumericSortLetter]">Action(Select)</onup>
					<onup condition="$EXP[IsNotNumericSortLetter]">SetFocus($PARAM[listitemid])</onup>
					<onup condition="$EXP[IsNotNumericSortLetter]">Action(prevletter)</onup>
					<onup>SetFocus($PARAM[letterbarid])</onup>
					<ondown>SetFocus($PARAM[listitemid])</ondown>
					<ondown>Action(nextletter)</ondown>
					<ondown>SetFocus($PARAM[letterbarid])</ondown>
				</control>
				<control type="button" id="$PARAM[searchid]">
					<left>$PARAM[searchleft]</left>
					<top>$PARAM[searchtop]</top>
					<width>30</width>
					<height>30</height>
					<texturefocus colordiffuse="listselected-text">touch-search.png</texturefocus>
					<texturenofocus colordiffuse="button-text">touch-search.png</texturenofocus>
					<onclick>SetProperty(CustomSearch,1,home)</onclick>
					<onclick>Skin.Reset(CustomSearchTerm)</onclick>
					<onclick>Skin.SetString(CustomSearchTerm)</onclick>
					<onclick>ActivateWindow(1156)</onclick>
					<animation effect="zoom" start="100" end="120" center="auto">focus</animation>
				</control>
				<control type="grouplist"  id="$PARAM[letterbarid]1">
					<left>$PARAM[letterbarleft]</left>
					<top>$PARAM[letterbartop]</top>
					<width>30</width>
					<height>864</height>
					<onleft>$PARAM[listitemid]</onleft>
					<onright condition="$EXP[isEnabledScrollbar]">$PARAM[scrollbarid]</onright>
					<onright condition="![$EXP[isEnabledScrollbar]]">$PARAM[illegalexitbar]</onright>
					<ondown>$PARAM[illegalexitbar]</ondown>
					<itemgap>2</itemgap>
					<orientation>vertical</orientation>
					<include content="Object_NumericLetter"><param name="searchbtn">"$PARAM[searchid]"</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">A</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">B</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">C</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">D</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">E</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">F</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">G</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">H</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">I</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">J</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">K</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">L</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">M</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">N</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">O</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">P</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">Q</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">R</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">S</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">T</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">U</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">V</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">W</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">X</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">Y</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">Z</param></include>
				</control>
			</control>
		</definition>
	</include>
	<include name="letterbar-horizontal">
		<param name="searchleft"/>
		<param name="searchtop"/>
		<param name="letterbarleft"/>
		<param name="letterbartop"/>
		<param name="searchid"/>
		<param name="letterbarid"/>
		<param name="scrollbarid"/>
		<param name="listitemid"/>
		<param name="illegalexitsearch" default="noop"/>
		<param name="illegalexitbar" default="noop"/>
		<param name="letterbarvisible"/>
		<definition>
			<control type="group">
				<visible>$PARAM[letterbarvisible]</visible>
				<animation effect="fadediffuse" start="FF808080" end="FFFFFFFF">VisibleChange</animation>
				<animation effect="fadediffuse" start="FF808080" end="FFFFFFFF" condition="Control.HasFocus($PARAM[letterbarid])">Conditional</animation>
				<control type="button" id="$PARAM[letterbarid]">
					<left>-100</left>
					<top>-100</top>
					<width>30</width>
					<height>30</height>
					<texturefocus />
					<font />
					<onup>$PARAM[listitemid]</onup>
					<ondown>$PARAM[scrollbarid]</ondown>
					<onleft condition="$EXP[IsNumericSortLetter]">SetFocus($PARAM[searchid])</onleft>
					<onleft condition="$EXP[IsNumericSortLetter]">Action(Select)</onleft>
					<onleft condition="$EXP[IsNotNumericSortLetter]">SetFocus($PARAM[listitemid])</onleft>
					<onleft condition="$EXP[IsNotNumericSortLetter]">Action(prevletter)</onleft>
					<onleft>SetFocus($PARAM[letterbarid])</onleft>
					<onright>SetFocus($PARAM[listitemid])</onright>
					<onright>Action(nextletter)</onright>
					<onright>SetFocus($PARAM[letterbarid])</onright>
				</control>
				<control type="button" id="$PARAM[searchid]">
					<left>$PARAM[searchleft]</left>
					<top>$PARAM[searchtop]</top>
					<width>30</width>
					<height>30</height>
					<texturefocus colordiffuse="listselected-text">touch-search.png</texturefocus>
					<texturenofocus colordiffuse="button-text">touch-search.png</texturenofocus>
					<onclick>SetProperty(CustomSearch,1,home)</onclick>
					<onclick>Skin.Reset(CustomSearchTerm)</onclick>
					<onclick>Skin.SetString(CustomSearchTerm)</onclick>
					<onclick>ActivateWindow(1156)</onclick>
					<animation effect="zoom" start="100" end="120" center="auto">focus</animation>
				</control>
				<control type="grouplist"  id="$PARAM[letterbarid]1">
					<left>$PARAM[letterbarleft]</left>
					<top>$PARAM[letterbartop]</top>
					<width>1848</width>
					<height>30</height>
					<onup>$PARAM[listitemid]</onup>
					<ondown condition="$EXP[isEnabledScrollbar]">$PARAM[scrollbarid]</ondown>
					<ondown condition="![$EXP[isEnabledScrollbar]]">$PARAM[illegalexitbar]</ondown>
					<onleft>$PARAM[searchid]</onleft>
					<onright>$PARAM[illegalexitbar]</onright>
					<itemgap>37</itemgap>
					<orientation>horizontal</orientation>
					<include content="Object_NumericLetter"><param name="searchbtn">"$PARAM[searchid]"</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">A</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">B</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">C</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">D</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">E</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">F</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">G</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">H</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">I</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">J</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">K</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">L</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">M</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">N</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">O</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">P</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">Q</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">R</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">S</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">T</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">U</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">V</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">W</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">X</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">Y</param></include>
					<include content="Object_AlphabetLetter"><param name="letter">Z</param></include>
				</control>
			</control>
		</definition>
	</include>
	<include name="touch-controls-common">
		<width>48</width>
		<height>48</height>
		<include>focus-zoom</include>
	</include>
	<include name="touch-controls">
		<control type="grouplist" id="8000">
			<visible>$EXP[isEnabledTouch]</visible>
			<left>30</left>
			<top>1026</top>
			<width>400</width>
			<height>48</height>
			<itemgap>18</itemgap>
			<orientation>horizontal</orientation>
			<control type="button"><!-- Back -->
				<include>touch-controls-common</include>
				<texturefocus>touch-back.png</texturefocus>
				<texturenofocus>touch-back.png</texturenofocus>
				<onclick>Back</onclick>
				<visible>!Window.IsVisible(home)</visible>
			</control>
			<control type="button"><!-- Context -->
				<include>touch-controls-common</include>
				<texturefocus>touch-context.png</texturefocus>
				<texturenofocus>touch-context.png</texturenofocus>
				<onclick>$VAR[FocusToView]</onclick>
				<onclick>Action(ContextMenu)</onclick>
				<visible>[Window.IsVisible(videos) | Window.IsVisible(music) | Window.IsVisible(games) | Window.IsVisible(pictures) | Window.IsVisible(addonbrowser)] + $EXP[isnotParentFolder]</visible>
			</control>
			<control type="togglebutton"><!-- OSD Play/Pause -->
				<include>touch-controls-common</include>
				<texturefocus>touch-play.png</texturefocus>
				<texturenofocus>touch-play.png</texturenofocus>
				<alttexturefocus>touch-pause.png</alttexturefocus>
				<alttexturenofocus>touch-pause.png</alttexturenofocus>
				<usealttexture>Player.Paused</usealttexture>
				<onclick>ActivateWindow(playercontrols)</onclick>
				<visible>Player.HasMedia</visible>
			</control>
			<control type="button"><!-- Zoom -->
				<include>touch-controls-common</include>
				<texturefocus>touch-zoom.png</texturefocus>
				<texturenofocus>touch-zoom.png</texturenofocus>
				<onclick>FullScreen</onclick>
				<visible>Player.HasMedia</visible>
			</control>
			<control type="button"><!-- Search -->
				<include>touch-controls-common</include>
				<texturefocus>touch-search.png</texturefocus>
				<texturenofocus>touch-search.png</texturenofocus>
				<onclick>SetProperty(CustomSearch,1,home)</onclick>
				<onclick>Skin.Reset(CustomSearchTerm)</onclick>
				<onclick>Skin.SetString(CustomSearchTerm)</onclick>
				<onclick>ActivateWindow(1156)</onclick>
			</control>
			<control type="button"><!-- Favourite -->
				<include>touch-controls-common</include>
				<texturefocus>touch-fav.png</texturefocus>
				<texturenofocus>touch-fav.png</texturenofocus>
				<onclick>ActivateWindow(favouritesbrowser)</onclick>
				<visible>!Window.IsVisible(home)</visible>
			</control>
			<control type="button"><!-- Screen Settings -->
				<include>touch-controls-common</include>
				<texturefocus>touch-settings.png</texturefocus>
				<texturenofocus>touch-settings.png</texturenofocus>
				<onclick condition="!String.IsEqual(Window(home).Property(ShowScreenSettings),show)">SetFocus(9000)</onclick>
				<onclick condition="!String.IsEqual(Window(home).Property(ShowScreenSettings),show)">SetProperty(ShowScreenSettings,show,home)</onclick>
				<onclick condition="String.IsEqual(Window(home).Property(ShowScreenSettings),show)">ClearProperty(ShowScreenSettings,home)</onclick>
				<visible>!Skin.HasSetting(lock-screensettings)</visible>
			</control>
		</control>
	</include>
	<include name="PVRChannelNumberInput">
		<control type="label" id="1">
			<left>0</left>
			<top>0</top>
			<width>1920</width>
			<height>200</height>
			<label>$INFO[PVR.ChannelNumberInput]</label>
			<font>Clock</font>
			<textcolor>skyblue</textcolor>
			<align>center</align>
			<aligny>center</aligny>
			<visible>!String.IsEmpty(PVR.ChannelNumberInput)</visible>
		</control>
	</include>
	<include name="settings-category-common">
		<left>27</left>
		<top>0</top>
		<width>426</width>
		<height>75</height>
		<aligny>center</aligny>
		<font>apptv22</font>
		<label>$INFO[ListItem.Label]</label>
	</include>
	<include name="settings-submenu-size">
		<width>1328</width>
		<height>75</height>
	</include>
	<include name="settings-submenu-common">
		<include>settings-submenu-size</include>
		<font>apptv22</font>
		<textwidth>1178</textwidth>
	</include>
	<include name="settings-submenu-radio">
		<include>settings-submenu-size</include>
		<font>apptv22</font>
		<textwidth>1125</textwidth>
		<radioposx>1266</radioposx>
	</include>
	<include name="settings-screen-common">
		<width>640</width>
		<height>70</height>
		<font>apptv22</font>
	</include>
	<include name="skinsettings-list">
		<left>80</left>
		<top>168</top>
		<width>1328</width>
		<height>750</height>
		<itemgap>0</itemgap>
		<onleft>1223</onleft>
		<onright>999</onright>
		<pagecontrol>1223</pagecontrol>
	</include>				
	<include name="info-options-common">
		<height>144</height>
		<width>144</width>
		<font>apptv16</font>
		<textcolor>disabled-text</textcolor>
		<focusedcolor>button-text</focusedcolor>
		<align>center</align>
		<aligny>top</aligny>
		<wrapmultiline>true</wrapmultiline>
		<textwidth>136</textwidth>
		<textoffsety>84</textoffsety>
	</include>
	<include name="keyboard-key-common">
		<shadowcolor/>
		<width>96</width>
		<height>96</height>
		<texturenofocus border="9">key-standard-nofocus.png</texturenofocus>
		<texturefocus border="9">key-standard-focus.png</texturefocus>
		<textcolor>keyboard-focus-text</textcolor>
		<focusedcolor>keyboard-focus-text</focusedcolor>
		<align>center</align>
		<aligny>center</aligny>
	</include>
	<include name="keyboard-auto-complete">
		<content>plugin://plugin.program.autocompletion?info=autocomplete&amp;&amp;id=$INFO[Control.GetLabel(312).index(1)]&amp;&amp;limit=10</content>
	</include>
	<include name="overlay-label">
		<width>1170</width>
		<height>34</height>
		<font>apptv18</font>
	</include>
	<include name="scrolltext">
		<scroll>true</scroll>
	</include>
	<include name="focus-zoom">
		<animation effect="zoom" start="100" end="116" center="auto" time="200" tween="back" easing="out" reversible="false">focus</animation>
	</include>
	<include name="busy-spin">
		<animation effect="rotate" start="360" end="0" center="auto" time="5400" loop="true" condition="true">conditional</animation>
	</include>
	<include name="screen-settings">
		<animation effect="slide" start="0,0" end="0,-1080">Visible</animation>
		<visible allowhiddenfocus="true">[ControlGroup(9000).HasFocus() | String.IsEqual(Window(home).Property(ShowScreenSettings),show)] + !Skin.HasSetting(lock-screensettings)</visible>
	</include>
	<include name="window-openclose">
		<animation effect="fade" time="100">WindowOpen</animation>
		<animation effect="fade" time="100">WindowClose</animation>
	</include>
	<include name="zoom-openclose">
		<animation type="WindowOpen" reversible="false">
			<effect type="fade" time="200"/>
			<effect type="zoom" start="110" end="100" time="200" center="auto"/>
		</animation>
		<animation type="WindowClose" reversible="false">
			<effect type="fade" time="200"/>
			<effect type="zoom" end="110" time="200" center="auto"/>
		</animation>
	</include>
</includes>